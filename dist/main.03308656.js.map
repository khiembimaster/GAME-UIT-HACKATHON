{"version":3,"sources":["src/Constant.ts","src/scenes/LoadScene.ts","src/scenes/MenuScene.ts","src/scenes/PlayScene.ts","src/main.ts"],"names":[],"mappings":"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","file":"main.03308656.js","sourceRoot":"..","sourcesContent":["export const CST = {\r\n    SCENES:{\r\n        LOAD: \"LOAD\",\r\n        MENU: \"MENU\",\r\n        PLAY: \"PLAY\"\r\n    },\r\n    IMAGE:{\r\n        LOGO:\"logo.png\",\r\n        OPTIONS:\"options_button.png\",\r\n        PLAY:\"play_button.png\",\r\n        TITLE:\"title_bg.jpg\"\r\n    },\r\n    AUDIO:{\r\n        TITLE:\"shuinvy-childhood.mp3\",\r\n    },\r\n    SPRITE:{\r\n        CAT:\"cat.png\",\r\n    }\r\n}","import { CST } from \"../Constant\";\r\nexport class LoadScene extends Phaser.Scene{\r\n    constructor(){\r\n        super(CST.SCENES.LOAD);\r\n    }\r\n    init(){\r\n\r\n    }\r\n    loadImages(){\r\n        this.load.setPath(\"./assets/image\");\r\n        \r\n        for(let prop in CST.IMAGE){\r\n            //@ts-ignore\r\n            this.load.image(CST.IMAGE[prop], CST.IMAGE[prop]);\r\n        }\r\n    }\r\n    loadAudios(){\r\n        this.load.setPath(\"./assets/audio\");\r\n        \r\n        for(let prop in CST.AUDIO){\r\n            //@ts-ignore\r\n            this.load.audio(CST.AUDIO[prop], CST.AUDIO[prop]);\r\n        }\r\n    }\r\n    loadSprites(frameConfig?: Phaser.Types.Loader.FileTypes.ImageFrameConfig){\r\n        this.load.setPath(\"./assets/sprite\");\r\n        \r\n        for(let prop in CST.SPRITE){\r\n            //@ts-ignore\r\n            this.load.spritesheet(CST.SPRITE[prop], CST.SPRITE[prop], frameConfig);\r\n        }\r\n    }\r\n\r\n    preload(){\r\n        //change screen resolution to: 800x600\r\n        \r\n        //load atlases\r\n        this.load.spritesheet(\"anna\", \"./assets/sprite/anna.png\", {frameHeight:64, frameWidth: 64});\r\n        this.load.atlas(\"characters\", \"./assets/sprite/characters.png\", \"./assets/sprite/characters.json\");\r\n        this.load.atlas(\"daze\", \"./assets/sprite/daze.png\", \"./assets/sprite/daze.json\");\r\n        //load image, spritesheet, sound, tiles, tiledmap,..\r\n        this.loadImages();\r\n        this.loadAudios();\r\n        this.loadSprites({\r\n            frameWidth: 32,\r\n            frameHeight: 32\r\n        });\r\n        // Create a loading bar\r\n        \r\n        let loadingBar = this.add.graphics({\r\n            fillStyle:{\r\n                color: 0xffffff\r\n            }\r\n        })\r\n        \r\n        /*\r\n        Loader Events:\r\n            complete - when done loading everything\r\n            progress - loader number progress in decimal\r\n        */\r\n\r\n       this.load.on(\"progress\", (precent: number)=>{\r\n            loadingBar.fillRect(0, this.game.renderer.height / 2, this.game.renderer.width * precent, 50);\r\n            console.log(precent);\r\n       })\r\n\r\n       this.load.on(\"complete\", ()=>{\r\n            // this.scene.start\r\n       })\r\n\r\n       this.load.on(\"load\", (file: Phaser.Loader.File)=>{\r\n            console.log(file.src);\r\n       })\r\n    }\r\n    create(){\r\n        this.scene.start(CST.SCENES.MENU);\r\n    }\r\n}","import { CST } from \"../Constant\";\r\nexport class MenuScene extends Phaser.Scene{\r\n    constructor(){\r\n        super(CST.SCENES.MENU);\r\n    }\r\n    init(){\r\n        \r\n    }\r\n    create(){ //creating the menu screen\r\n\r\n        //create images(z order)\r\n\r\n        this.add.image(this.game.renderer.width / 2, this.game.renderer.height * 0.2, CST.IMAGE.LOGO).setDepth(1);\r\n\r\n        this.add.image(0, 0, CST.IMAGE.TITLE).setOrigin(0);\r\n\r\n        let playButton = this.add.image(this.game.renderer.width / 2, this.game.renderer.height * 0.5, CST.IMAGE.PLAY).setDepth(2);\r\n\r\n        let optionButton = this.add.image(this.game.renderer.width / 2, this.game.renderer.height * 0.6, CST.IMAGE.OPTIONS).setDepth(2);\r\n        \r\n        //create sprites\r\n        let hoverSprite = this.add.sprite(128, 128, CST.SPRITE.CAT);\r\n        hoverSprite.setScale(2);\r\n        hoverSprite.setVisible(false);\r\n        \r\n        //create animtion\r\n        this.anims.create({\r\n            key: \"walk\",\r\n            frameRate: 4,\r\n            repeat: -1,\r\n            frames: this.anims.generateFrameNumbers(CST.SPRITE.CAT,{\r\n                frames: [0,1,2,3]\r\n            })\r\n        })\r\n        //create audio\r\n        this.sound.pauseOnBlur = false;\r\n        this.sound.play(CST.AUDIO.TITLE, {\r\n            loop: true\r\n        })\r\n\r\n        //make image buttons Interactive\r\n        playButton.setInteractive();\r\n        playButton.on(\"pointerover\", ()=>{\r\n            hoverSprite.setVisible(true);\r\n            hoverSprite.play(\"walk\");\r\n            hoverSprite.x = playButton.x - playButton.width;\r\n            hoverSprite.y = playButton.y;\r\n            // console.log(\"over\");\r\n        })\r\n        playButton.on(\"pointerout\", ()=>{\r\n            hoverSprite.setVisible(false);\r\n        })\r\n        playButton.on(\"pointerup\", ()=>{\r\n            // console.log(\"play\");\r\n            this.scene.start(CST.SCENES.PLAY);\r\n        })\r\n\r\n        optionButton.setInteractive();\r\n        optionButton.on(\"pointerover\", ()=>{\r\n            hoverSprite.setVisible(true);\r\n            hoverSprite.play(\"walk\");\r\n            hoverSprite.x = optionButton.x - optionButton.width;\r\n            hoverSprite.y = optionButton.y;\r\n        })\r\n        optionButton.on(\"pointerout\", ()=>{\r\n            hoverSprite.setVisible(false);\r\n        })\r\n        optionButton.on(\"pointerup\", ()=>{\r\n            // console.log(\"option\");\r\n            // this.scene.launch();\r\n        })\r\n\r\n\r\n    }\r\n}","import { Physics } from \"phaser\";\r\nimport { CST } from \"../Constant\"\r\n\r\nexport class PlayScene extends Phaser.Scene{\r\n    anna!: Phaser.Physics.Arcade.Sprite;\r\n    hooded!: Phaser.Physics.Arcade.Sprite;\r\n    keyboard!: {[index: string]: Phaser.Input.Keyboard.Key};\r\n    fireAttacks!: Phaser.Physics.Arcade.Group;\r\n    assassins!: Phaser.Physics.Arcade.Group;\r\n    \r\n    constructor(){\r\n        super(CST.SCENES.PLAY);\r\n    }\r\n    init(){\r\n        // console.log(\"play\");\r\n    }\r\n    preload(){\r\n        this.anims.create({\r\n            key: \"blaze\",\r\n            duration: 100,\r\n            frames: this.anims.generateFrameNames(\"daze\",{\r\n                prefix: \"fire0\",\r\n                suffix:\".png\",\r\n                end: 55,\r\n            }),\r\n            showOnStart: true,\r\n            hideOnComplete: true,\r\n        });\r\n        \r\n        this.textures.addSpriteSheetFromAtlas(\"hooded\", {frameWidth: 64, frameHeight: 64, atlas: \"characters\", frame: \"hooded\"});\r\n       \r\n        this.anims.create({\r\n            key: \"right\",\r\n            frameRate: 10,\r\n            frames: this.anims.generateFrameNumbers(\"anna\", {\r\n                start: 27,\r\n                end: 35,\r\n            }),\r\n        });\r\n        this.anims.create({\r\n            key: \"left\",\r\n            frameRate: 10,\r\n            frames: this.anims.generateFrameNumbers(\"anna\", {\r\n                start: 17,\r\n                end: 9\r\n            }),\r\n        });\r\n        this.anims.create({\r\n            key: \"up\",\r\n            frameRate: 10,\r\n            frames: this.anims.generateFrameNumbers(\"anna\", {\r\n                start: 0,\r\n                end: 8\r\n            }),\r\n        });\r\n        this.anims.create({\r\n            key: \"down\",\r\n            frameRate: 10,\r\n            frames: this.anims.generateFrameNumbers(\"anna\", {\r\n                start: 18,\r\n                end: 26\r\n            }),\r\n        });\r\n\r\n        this.load.image(\"terrain\", \"./assets/image/terrain_atlas.png\");\r\n        this.load.image(\"items\", \"./assets/image/items.png\");\r\n\r\n        this.load.tilemapTiledJSON(\"mappy\", \"./assets/maps/mappy.json\");\r\n\r\n    }\r\n    create(){\r\n        this.anna = this.physics.add.sprite(400, 400, \"anna\", 26).setScale(2);\r\n        this.anna.setSize(40,50).setOffset(10,10);\r\n        this.anna.setCollideWorldBounds(true);\r\n        this.hooded = this.physics.add.sprite(200,200,\"hooded\", 26).setScale(2).setImmovable(true);\r\n        this.assassins = this.physics.add.group({immovable: true});\r\n        this.assassins.add(this.hooded);\r\n        this.fireAttacks = this.physics.add.group();\r\n        // window.hooded = this.hooded;\r\n        // window.anna = this.anna;\r\n        \r\n        //@ts-ignore\r\n        this.keyboard = this.input.keyboard?.addKeys(\"W,A,S,D\");\r\n\r\n        this.input.on(\"pointermove\", (pointer: Phaser.Input.Pointer)=>{\r\n            if(pointer.isDown){\r\n                let fire = this.add.sprite(pointer.x, pointer.y, \"daze\", \"fire00.png\").play(\"blaze\");\r\n                this.fireAttacks.add(fire);\r\n                fire.on(\"animationcomplete\",()=>{\r\n                    fire.destroy();\r\n                })\r\n            }\r\n        })\r\n        \r\n        this.physics.world.addCollider(this.anna, this.assassins, (anna, assassin)=>{\r\n            assassin.destroy();\r\n            anna.destroy();\r\n            // this.scene.start(CST.SCENES.MENU);\r\n        });\r\n        \r\n        this.physics.world.addCollider(this.fireAttacks, this.assassins, (fireAttack, assassin)=>{\r\n            assassin.destroy();\r\n            fireAttack.destroy();\r\n        });        \r\n\r\n        let mappy = this.add.tilemap( 'mappy');\r\n        let terrain = mappy.addTilesetImage(\"terrain_atlas\", \"terrain\");\r\n        //layers\r\n        let layer = mappy.createLayer(\"top\", [terrain], 0, 0);\r\n        //map collisions\r\n        this.physics.add.collider(this.anna, layer);    \r\n        //by tile property\r\n        layer?.setCollisionByProperty({collides:true});\r\n    \r\n    }   \r\n\r\n    update(time: number, delta: number){ //delta 16.666 @ 60fps\r\n        \r\n        for(let i = 0; i < this.assassins.getChildren().length; i++){\r\n            this.physics.accelerateToObject(this.assassins.getChildren()[i], this.anna);\r\n        }        \r\n\r\n        \r\n        if(this.anna.active === true){\r\n            \r\n            if(this.keyboard.D.isDown === true){\r\n                this.anna.setVelocityX(160);\r\n                \r\n            }\r\n            if(this.keyboard.W.isDown === true){\r\n                this.anna.setVelocityY(-160);\r\n                this.anna.play(\"up\", true);\r\n            }\r\n            if(this.keyboard.A.isDown === true){\r\n                this.anna.setVelocityX(-160);\r\n            \r\n            }\r\n            if(this.keyboard.S.isDown === true){\r\n                this.anna.setVelocityY(160);\r\n                \r\n            }\r\n    \r\n            if(this.keyboard.S.isUp && this.keyboard.A.isUp && this.keyboard.W.isUp && this.keyboard.D.isUp){\r\n                this.anna.setVelocity(0);\r\n                // this.anna.play(\"down\", false);\r\n            }\r\n\r\n            if(this.anna.body.velocity.x > 0){\r\n                this.anna.play(\"right\", true);\r\n            }else if(this.anna.body.velocity.x < 0){\r\n                this.anna.play(\"left\", true);\r\n            }else if(this.anna.body.velocity.y > 0){\r\n                this.anna.play(\"down\", true);\r\n            }else if(this.anna.body.velocity.y < 0){\r\n                this.anna.play(\"up\", true);\r\n            }\r\n        }\r\n        \r\n    }\r\n    \r\n}","/**@type {import(\"../typings/phaser\")} */\r\n\r\n\r\nimport { LoadScene } from \"./scenes/LoadScene\";\r\nimport { MenuScene } from \"./scenes/MenuScene\";\r\nimport { PlayScene } from \"./scenes/PlayScene\";\r\nconst config = {\r\n    type: Phaser.AUTO,\r\n    width: 800,\r\n    height: 600,\r\n    scene: [LoadScene, MenuScene, PlayScene],\r\n    render:{\r\n        pixelArt: true\r\n    },\r\n    physics:{\r\n        default: 'arcade',\r\n        arcade:{\r\n            // gravity: {y: 300},\r\n            debug: true\r\n        },\r\n    },\r\n};\r\n\r\nconst game = new Phaser.Game(config);\r\n\r\n"]}